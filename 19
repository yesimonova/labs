#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <malloc.h>
#include <time.h>

int main()
{
    printf("Выберите номер подзадания.\n");
    srand(time(NULL));
    int answ;
    scanf ("%d",&answ);
    switch (answ) {
        case 1:
            printf("Это задание на удаление соседних одинаковых элементов.\n");
            int *a;
            int N;
            printf("Введите положительное число N, которое является размером массива.\n");
            scanf("%d",&N);
            a = (int*)malloc(N*sizeof(int));
            printf("Введите элементы массива (какие-то соседние элементы должны повторяться).\n");
            for (int i=0;i<N;i++) {
                scanf("%d",&a[i]);
            }
            printf("Массив:\n");
            for (int i=0;i<N;i++) {
                printf("%d ",a[i]);
            }
            printf("\n");
            int null=0;
            for (int i=0;i<N;i++) {
                if (a[null]!=i[a]) {
                    null++;
                    a[null]=a[i];
                }
            }
            null++;
            printf("Новый массив:\n");
            for (int i=0;i<null;i++) {
                printf("%d ",a[i]);
            }
            free(a);
            break;
        case 2:
            printf("Это задание на удаление элементов массива, которые встречаются ровно два раза.\n");
            int *a1;
            int N1;
            printf("Введите положительное число N, которое является размером массива.\n");
            scanf("%d",&N1);
            a1 = (int*)malloc(N1*sizeof(int));
            printf("Введите элементы массива (какие-то соседние элементы должны повторяться).\n");
            for (int i=0;i<N1;i++) {
                scanf("%d",&a1[i]);
            }
            printf("Массив:\n");
            for (int i=0;i<N1;i++) {
                printf("%d ",a1[i]);
            }
            printf("\n");
            int num,pom,ai;
            for (int i=0;i<N1;i++) {
                num=0;
                for (int j=0;j<N1;++j) {
                    if (a1[i]==a1[j]) {
                        ++num;
                    }
                }
                if (num==2) {
                    pom=i-1;
                    ai=a1[i];
                    for (int j=i;j<N1;++j) {
                        if (a1[j]!=a1[i]) {
                            ++pom;
                            a1[pom]=a1[j];
                        }
                    }
                    N1=pom+1;
                    --i;
                }
            }
            printf("Новый массив:\n");
            for (int i=0;i<N1;++i) {
                printf("%d ",a1[i]);
            }
            printf("\n");
            printf("Новый размер массива равен %d",N1);
            free(a1);
            break;
        case 3:
            printf("Это задание на добавление нуля перед максимальным и после минимального элементов массива.\n");
            int *a2;
            int N2;
            printf("Введите положительное число N, которое является размером массива.\n");
            scanf("%d",&N2);
            a2 = (int*)malloc(N2*sizeof(int));
            for (int i=0;i<N2;i++) {
                a2[i]=rand()%100;
            }
            printf("Сгенерированный массив:\n");
            for (int i=0;i<N2;i++) {
                printf("%d ",a2[i]);
            }
            printf("\n");
            int min=0,max=0;
            for (int i=0;i<N2;i++) {
                if (a2[min]>a2[i]) {
                    min=i;
                }
            }
            for (int i=0;i<N2;i++) {
                if (a2[max]<a2[i]) {
                    max=i;
                }
            }
            if (max-min) {
                max++;
            }
            N2++;
            for (int i=N2-1;i>=min;i--) {
                a2[i]=a2[i-1];
            }
            a2[min]=0;
            N2++;
            for (int i=N2-1;i>max+1;i--) {
                a2[i]=a2[i-1];
            }
            a2[max]=0;
            printf("Новый массив:\n");
            for (int i=0;i<N2;i++) {
                printf("%d ",a2[i]);
            }
            free(a2);
            break;
        case 4:
            printf("Это задание на добавление нулевых элементов после каждого отрицательного элемента массива.\n");
            int *a3;
            int N3;
            printf("Введите число N, которое является размером массива.\n");
            scanf("%d",&N3);
            a3 = (int*)malloc(N3*sizeof(int));
            for (int i=0;i<N3;i++) {
                a3[i]=rand()%200-100;
            }
            printf("Сгенерированный массив:\n");
            for (int i=0;i<N3;i++) {
                printf("%d ",a3[i]);
            }
            printf("\n");
            for(int i=N3-1;i>=0;--i) {
                if (a3[i]<0) {
                    ++N3;
                    for (int j=N3;j>i;--j) {
                        a3[j]=a3[j-1];
                    }
                    a3[i+1]=0;
                }
            }
            printf("Новый массив:\n");
            for (int i=0;i<N3;i++) {
                printf("%d ",a3[i]);
            }
            free(a3);
            break;
        case 5:
            printf("Это задание на вывод номеров одинаковых элементов массива в порядке возрастания.\n");
            int *a4;
            int N4;
            printf("Введите число N, которое является размером массива.\n");
            scanf("%d",&N4);
            a4 = (int*)malloc(N4*sizeof(int));
            for (int i=0;i<N4;i++) {
                a4[i]=rand()%200-100;
            }
            printf("Сгенерированный массив:\n");
            for (int i=0;i<N4;i++) {
                printf("%d ",a4[i]);
            }
            printf("\n");
            for(int i=N4-1;i>=0;--i) {
                if (a4[i]>0) {
                    ++N4;
                    for (int j=N4-1;j>i;--j) {
                        a4[j]=a4[j-1];
                    }
                    a4[i]=0;
                }
            }
            printf("Новый массив:\n");
            for (int i=0;i<N4;i++) {
                printf("%d ",a4[i]);
            }
            free(a4);
            break;
        default:
            printf("Неверный номер подзадания.");
    }
    return 0;
}
